<html>
<head>
<style>
  * {
    margin: 0;
    padding: 0;
  }
  html, body {
    margin: 0;
    padding: 0;
    font-family:Verdana, Arial, Helvetica, sans-serif;
    font-size:12px;
  }
  div {
  }
  #left {
    float: left;
    margin-right: 20px;
  }
  #server {
    margin-bottom: 10px;
  }
  #client {
  }
  #response {
  }
  #response_content {
    width: 100%;
    height: 50%;
  }
  label{
    display: block;
    float: left;
    text-align: right;
    white-space: nowrap;
    width: 120px;
  }
</style>
</head>
<body>

<div id="content">
<div id="left">
<div id="server">
<fieldset>
  <legend>
    Server
  </legend>

  <label for="server_url">Server URL:</label>
  <input type="url" id="server_url" placeholder="http://localhost:8124/" />
  <br />

  <label for="server_enableCors">Enable CORS:</label>
  <input type="checkbox" id="server_enableCors" />
  <br />

  <label for="server_allowCredentials">Allow Credentials:</label>
  <input type="checkbox" id="server_allowCredentials" />
  <br />

  <label for="server_allowMethods">Allow Methods:</label>
  <input type="text" id="server_allowMethods" />
  <br />

  <label for="server_allowHeaders">Allow Headers:</label>
  <input type="text" id="server_allowHeaders" />
  <br />
</fieldset>
</div>

<div id="client">
<fieldset>
  <legend>
    Client
  </legend>

  <label for="client_httpMethod">HTTP Method</label>
  <input type="text" id="client_httpMethod" placeholder="GET" />
  <br />

  <label for="client_Credentials">With Credentials:</label>
  <input type="checkbox" id="client_withCredentials" />
  <br />

  <label for="client_headers">Headers</label><br />
  <textarea id="client_headers"></textarea>
  <br />

</fieldset>

  <input type="submit" id="client_sendRequest" value="Send Request" class=".button" />
</div>
</div>

<div id="response">
  <fieldset>
    <legend>
      Response
    </legend>

    <textarea id="response_content"></textarea>
  </fieldset>
</div>

</div>

<script src="jquery-1.4.4.min.js"></script>
<script>

  function getServerSettings() {
    var settings = {};
    settings.url = $('#server_url').val();
    settings.enableCors = $('#server_enableCors').attr('checked');
    settings.allowCredentials = $('#server_allowCredentials').attr('checked');
    settings.allowMethods = $('#server_allowMethods').val();
    settings.allowHeaders = $('#server_allowHeaders').val();
    return settings;
  }

  function getClientSettings() {
    var settings = {};
    settings.httpMethod = $('#client_httpMethod').val();
    settings.withCredentials = $('#client_withCredentials').attr('checked');
    settings.headers = parseHeaders($('#client_headers').val());
    return settings;
  }

  function getSettings() {
    var settings = {};
    settings.server = getServerSettings();
    settings.client = getClientSettings();
    return settings;
  }

  function getResponseSettings(settings) {
    settings = settings || {};
    var responseConfig = [];
    var preflightConfig = {};
    var corsConfig = {};

    preflightConfig.statusCode = 200;
    preflightConfig.condition = 'r.method == "OPTIONS" && r.header["origin"]';
    preflightConfig.headers = {};
    if (settings.enableCors) {
      preflightConfig.headers['Access-Control-Allow-Origin'] = window.location.origin;
    }
    if (settings.allowCredentials) {
      preflightConfig.headers['Access-Control-Allow-Credentals'] = true;
    }
    if (settings.allowMethods) {
      preflightConfig.headers['Access-Control-Allow-Methods'] = settings.allowMethods;
    }
    if (settings.allowHeaders) {
      preflightConfig.headers['Access-Control-Allow-Headers'] = settings.allowHeaders;
    }
    responseConfig.push(preflightConfig);

    corsConfig.statusCode = 200;
    corsConfig.condition = 'r.header["origin"]';
    preflightConfig.headers = {};
    if (settings.enableCors) {
      corsConfig.headers['Access-Control-Allow-Origin'] = window.location.origin;
    }
    responseConfig.push(corsConfig);

    return responseConfig;
  }

  function getRequestUrl(config) {
    config = config || {};
    return '/200?json=' + JSON.stringify(config);
  }

  function parseHeaders(headerStr) {
    var headers = {};
    if (!headerStr) {
      return headers;
    }
    var headerPairs = headerStr.split('\n');
    for (var i = 0; i < headerPairs.length; i++) {
      var headerPair = headerPairs[i];
      var index = headerPair.indexOf(': ');
      if (index > 0) {
        var key = $.trim(headerPair.substring(0, index));
        var val = $.trim(headerPair.substring(index + 2));
        headers[key] = val;
      }
    }
    return headers;
  }

  function createCORSRequest(method, url){
    var xhr = new XMLHttpRequest();
    if ("withCredentials" in xhr){
      xhr.open(method, url, true);
    } else if (typeof XDomainRequest != "undefined"){
      xhr = new XDomainRequest();
      xhr.open(method, url);
    } else {
      xhr = null;
    }
    return xhr;
  }

  function sendRequest() {
    var settings = getSettings();
    var responseConfig = getResponseConfig(settings.server);
    var requestUrl = getRequestUrl(responseConfig);
    var xhr = createCORSRequest(settings.client.httpMethod, requestUrl);
    if (settings.withCredentals) {
      xhr.withCredentials = true;
    }
  }
</script>
</body>
</html>